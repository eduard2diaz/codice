# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'es'
    storage_directory: '%env(STORAGE_DIRECTORY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        #esta linea es agregada por mi y surge debido a la necesidad que tenia de enviar una variable y no una clase al
        #servicio de envio de correo, en este caso la variable $mailerurl que con el mismo nombre que la declare aqui es como
        #debe aparecer en el constructor, ademas de ella puedo si hubiese querido incluir otras variables, caro siempre declarandolas en bind
        #y en caso de que sean clases se definen en el arguments y de indica la clase ala que pertenece en el constructor,
        #ojo: las variables que se declaran en bind se definen en el constructor de la clase con el mimso nombre que en el bind,
        #pero no se declaran en los argumentos del servicio cuando se declaran en este archivo
        bind:
            $mailer_host: '%env(MAILER_HOST)%'
            $mailer_port: '%env(MAILER_PORT)%'
            $mailer_username: '%env(MAILER_USERNAME)%'
            $mailer_password: '%env(MAILER_PASSWORD)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #activando las extensiones(truncate,wordwrap,..) twig que instale con composer require twig/extensions
    twig.extension.text:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }

    #DEFINIENDO MIS PROPIOS SERVICIOS
    usuario_subscriber:
        class: App\EventSubscriber\UsuarioSubscriber
        public: true
        tags:
            - { name: doctrine.event_subscriber,  connection: default }
        arguments: ['@service_container']

    autor_subscriber:
        class: App\EventSubscriber\AutorSubscriber
        public: true
        tags:
            - { name: doctrine.event_subscriber,  connection: default }
        arguments: ['@service_container']

    publicacion_subscriber:
        class: App\EventSubscriber\PublicacionSubscriber
        public: true
        tags:
            - { name: doctrine.event_subscriber,  connection: default }
        arguments: ['@service_container']

    balanceanual_subscriber:
        class: App\EventSubscriber\BalanceAnualSubscriber
        public: true
        tags:
            - { name: doctrine.event_subscriber,  connection: default }
        arguments: ['@service_container']

    app.loginlistener:
        class: App\EventListener\LoginListener
        arguments: ["@doctrine"]
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }

    app.failure_login:
        class: App\EventListener\FailureLogin

    app.logoutlistener:
        class: App\EventListener\LogoutListener
        arguments: ['@doctrine']

    app.email_service:
        class: App\Services\EmailService
        public: true
        #por defecto cada vez que pasas o solicitas un servicio symfony te da una nueva instancia, pues por defecto
        #shared es true, si quiero siempre que solicite un servicio obetener la misma instancia pngo shared: false
        shared: false

    app.notificacioncommand:
        class: App\Command\NotificacionCommand
        arguments: ["@doctrine.orm.default_entity_manager"]
        tags:
            - { name: console.command }

    app.notificacion_service:
        class: App\Services\NotificacionService
        public: true

    uniquemultipleentity.validator:
        class: App\Validator\UniqueMultipleEntityValidator
        public: true
        tags:
            - { name: validator.constraint_validator, alias: uniquemultipleentity.validator }
        arguments: ['@doctrine']

    autor.validator:
        class: App\Validator\AutorValidator
        public: true
        tags:
            - { name: validator.constraint_validator, alias: autor.validator }
        arguments: ['@doctrine']

    pais.validator:
        class: App\Validator\PaisValidator
        public: true
        tags:
            - { name: validator.constraint_validator, alias: pais.validator }
        arguments: ['@doctrine']


    app.token_authenticator:
        class: App\Security\ApiTokenAuthenticator